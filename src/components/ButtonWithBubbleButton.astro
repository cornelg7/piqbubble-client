---
import { getColors } from '../utils/General.utils';
import BubbleButton from './BubbleButton.astro';
import Button from './Button.astro';

export interface Props {
	href: string;
	light: boolean;
	logoNameId: string;
	position: number;
	shouldChangeTheme?: boolean;
}

const { href, light, logoNameId, position, shouldChangeTheme = false } = Astro.props;
const { foregroundColor, backgroundColor } = getColors(light);

const items = 5;
const angle = 360/items;
const add = 55;
---

<div class="bubble-button-behind-button-container">
	<div class="bubble-button-behind-button-item">
		<BubbleButton 
			text="" 
			id={(light ? 'light' : 'dark') + '-' + logoNameId} 
			light={light} 
			containerTargetId={(light ? 'light' : 'dark') + '-' + logoNameId + '-logo-container'}
			shouldChangeTheme={shouldChangeTheme}
		/>
	</div>
	<div class="bubble-button-behind-button-item unbubble-item" id={(light ? 'light' : 'dark') + '-' + logoNameId + '-logo-container'}>
		<Button href={href} light={light}>
			<slot></slot>
		</Button>
	</div>
</div>

<style lang="scss" define:vars={{ foregroundColor, backgroundColor, position, angle, add }}>
	@import "../styles/global";
	
	.bubble-button-behind-button-container {
		position: relative;
		//transform: translate(-75px, -20px);
		$ad: calc(var(--add) * 1deg);
		$ang: calc(var(--angle) * 1deg);
		$mang: calc(var(--angle) * -1deg);
		transform:  rotate(calc((var(--position) * $ang + $ad)))
                    translate(calc(16em / 2)) 
                    rotate(calc((var(--position) * $mang - $ad)));
		.bubble-button-behind-button-item {
			position: absolute;
			z-index: 2;
		}
		.unbubble-item {
			top: 50px;
			left: 105px;
			transition: color .8s ease;
		}
	}
</style>
